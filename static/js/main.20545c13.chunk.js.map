{"version":3,"sources":["Components/todohead.js","Components/todoInput.js","Components/todoRows.js","Containers/todolist.js","App.js","index.js","registerServiceWorker.js"],"names":["TodoHead","react_default","a","createElement","className","style","marginRight","TodoInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","name","target","value","setState","defineProperty","resetState","todo","time","state","_this2","textAlign","type","placeholder","onChange","min","trim","Number","title","disabled","variant","onClick","props","submitNote","color","React","Component","getFormatTime","timiInMilliseconds","Date","toISOString","substr","todoRows","element","estTime","notes","index","startTime","width","start","endTime","end","ToDoList","newNote","concat","toConsumableArray","getTimeMilli","getTime","map","el","i","assign","alert","Components_todoRows","key","todoInput","length","marginTop","todohead","App","todolist","ReactDOM","render","src_App","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.20545c13.chunk.js","sourcesContent":["import React from 'react'\n\nconst TodoHead = () => {\n    return (\n        <thead >\n            <tr >\n                <th> <span className=\"icon-question-circle1\" style={{ marginRight: \"2px\" }} />ToDo</th>\n                <th> <span className=\"icon-clock\" style={{ marginRight: \"2px\" }} />Estimated Time(minutes)</th>\n                <th> <span className=\"icon-clock\" style={{ marginRight: \"2px\" }} />Start Time(HH:MM:SS)</th>\n                <th> <span className=\"icon-clock\" style={{ marginRight: \"2px\" }} />End Time(HH:MM:SS)</th>\n                <th> <span className=\"icon-clock\" style={{ marginRight: \"2px\" }} />Total Time(HH:MM:SS)</th>\n            </tr>\n        </thead>\n    )\n}\n\nexport default TodoHead;","import React from 'react'\n\n\nclass TodoInput extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            todo: '',\n            time: ''\n        }\n    }\n\n\n    //On Handling Input Boxes\n    handleInput = (e) => {\n        let name = e.target.name;\n        let value = e.target.value;\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n\n    //reset States on SubmitTodo\n    resetState = () => {\n        this.setState({\n            todo: '',\n            time : ''\n        })\n    }\n    \n    render() {\n        return (\n            <div style={{ textAlign: \"center\" }}>\n                <div className=\"form-group row\" >\n                    <label className=\"col-sm-3 col-form-label\">Todo :  </label>\n                    <div className=\"col-sm-6\">\n                        <input className=\"form-control\" type=\"text\" name=\"todo\" placeholder=\"Add Todo\" onChange={(e) => { this.handleInput(e) }} value={this.state.todo} />\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <label className=\"col-sm-3 col-form-label\">Estimated Time (minutes) : </label>\n                    <div className=\"col-sm-6\">\n                        <input className=\"form-control\" type=\"number\" min=\"0\" name=\"time\" placeholder=\"Estimated time\" onChange={(e) => { this.handleInput(e) }} value={this.state.time} />\n                    </div>\n                </div>\n                {this.state.todo.trim() === '' || this.state.time.trim() === '' || Number(this.state.time.trim()) <= 0 ?\n                    <button title=\"Please add todo and valid estimated time\" disabled className=\"btn btn-lg\" type=\"button\" variant=\"contained\" >\n                        Submit\n                                    </button>\n                    : <button onClick={(e)=>{this.props.submitNote(e,this.state.todo, this.state.time); this.resetState();}} className=\"btn btn-primary btn-lg\" type=\"button\" variant=\"contained\" color=\"primary\">\n                        Submit\n                    </button>\n                }\n            </div>\n        )\n    }\n\n}\n\nexport default TodoInput;","import React from 'react'\n\n\nconst todoRows = (props) => {\n\n    return(\n        <tr>\n                    \n        <td style={{ textAlign: \"center\" }}>{props.element.todo}</td>\n\n        <td style={{ textAlign: \"center\" }}>{props.element.estTime}</td>\n\n        {\n        props.notes[props.index].startTime === 0 ? \n        <td style={{ textAlign: \"center\" }}>\n             <div style={{ width: \"100%\" }}>\n                <button name={props.index} className=\"btn btn-primary btn-sm\" type=\"button\" variant=\"contained\" color=\"primary\" onClick={(e) => props.start(e)}>Start</button>\n            </div>\n        </td> \n        : \n        <td style={{ textAlign: \"center\" }}>{getFormatTime(props.notes[props.index].startTime)}</td>\n        }\n\n        {\n        props.notes[props.index].endTime === 0 ? \n        <td style={{ textAlign: \"center\" }}>\n            <div style={{ width: \"100%\" }}> \n                <button name={props.index} className=\"btn btn-primary btn-sm\" type=\"button\" variant=\"contained\" color=\"primary\" onClick={(e) => props.end(e)}>End</button> \n            </div>\n        </td> \n        : \n        <td style={{ textAlign: \"center\" }}>{getFormatTime(props.notes[props.index].endTime)}</td>\n        }\n\n        {\n        props.notes[props.index].endTime !== 0 ? \n        <td style={{ textAlign: \"center\" }}>{getFormatTime(props.notes[props.index].endTime - props.notes[props.index].startTime)}</td> \n        : \n        <td style={{ textAlign: \"center\" }}>--:--:--</td>\n        }\n\n    </tr>\n    )\n}\n\n//Getting Current time in format HH:MM:SS\nconst getFormatTime = (timiInMilliseconds) => {\n    return new Date(timiInMilliseconds).toISOString().substr(11,8)\n}\n\n\nexport default todoRows;","import React from 'react'\nimport '../Styles/App.css'\nimport TodoHead from '../Components/todohead'\nimport TodoInput from '../Components/todoInput'\nimport TodoRows from '../Components/todoRows'\n\nclass ToDoList extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            notes: [],\n        }\n    }\n\n    //Onclicking Submit Button\n    submitNote = (e,todo,time) => {\n        let newNote = {\n            todo: todo,\n            estTime: time,\n            startTime: 0,\n            endTime: 0\n        }\n        this.setState({\n            notes : [...this.state.notes, newNote]\n        })\n    }\n\n    //Getting current time in milliseconds\n    getTimeMilli = () => {\n        var d = new Date();\n        return d.getTime();\n    }\n\n\n    //Onclick Of starting a ToDO\n    start = (e) => {\n        let time = this.getTimeMilli();\n        this.setState({\n            notes: this.state.notes.map((el, i) => (i == e.target.name ? Object.assign({}, el, { startTime: time }) : el))\n        })\n    }\n\n    //Onclick of ending the ToDO\n    end = (e) => {\n        let time = this.getTimeMilli();\n        if (this.state.notes[e.target.name].startTime != 0) {\n            this.setState({\n                notes: this.state.notes.map((el, i) => (i == e.target.name ? Object.assign({}, el, { endTime: time }) : el))\n            })\n        }\n        else {\n            alert(\"Please Start the task first\")\n        }\n    }\n\n\n    render() {\n        const todo = this.state.notes.map((element, index) => {\n            return (\n                <TodoRows key = {index} \n                element = {element} \n                index={index} \n                notes={this.state.notes} \n                start={(e)=>{this.start(e)}} \n                end ={(e)=>{this.end(e)}}\n                />\n            )\n        })\n\n        return (\n            <div className=\"container\">\n                <div className=\"scores-block1 clearfix\">\n                    <div className=\"bg-white shadow-sm Assessment_Results\">\n                        <TodoInput submitNote = {(e,todo,time)=>this.submitNote(e,todo,time)}/>\n                        {\n                        this.state.notes.length !== 0 && \n                        <table className=\"table\" style={{ marginTop: \"2rem\" }}>\n                           <TodoHead />\n                            <tbody >\n                                {todo}\n                            </tbody>\n                        </table>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ToDoList;","import React, { Component } from 'react';\nimport ToDoList from './Containers/todolist'\n\nclass App extends Component {\n  render() {\n    return (\n      <ToDoList/>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//to make the app work offline\nregisterServiceWorker();","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}"],"sourceRoot":""}