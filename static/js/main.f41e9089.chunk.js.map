{"version":3,"sources":["todolist.js","App.js","serviceWorker.js","index.js"],"names":["ToDoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","name","target","value","setState","defineProperty","submitNote","console","log","newNote","todo","state","estTime","time","prevState","notes","concat","start","d","Date","getHours","getMinutes","getSeconds","getTime","startTime","end","endTime","total","_this2","map","element","index","react_default","a","createElement","key","className","type","variant","color","onClick","Number","style","textAlign","onSubmit","placeholder","onChange","marginTop","React","Component","App","todolist","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f41e9089.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\n\nclass ToDoList extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            todo : '',\n            time : 0,\n            notes : [],\n            start : 0,\n            startTime : '',\n            endTime : '',\n            end : 0,\n            total : false\n        }\n    }\n\n    handleInput = (e) => {\n        let name = e.target.name;\n        let value = e.target.value;\n\n        this.setState({\n            [name] : value\n        })\n    }\n    submitNote = () =>{\n        console.log(\"submitting\")\n        let newNote = {\n            todo : this.state.todo,\n            estTime : this.state.time\n        }\n        this.setState((prevState)=>{\n            return {\n            notes : prevState.notes.concat(newNote)\n            }\n        })\n    }\n\n    start=()=>{\n        var d = new Date(); \n        let time =   d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds(); \n        console.log(\"start \" + time)\n        this.setState({\n            start : d.getTime(),\n            startTime : time\n        })\n    }\n\n    end=()=>{\n        var d = new Date(); \n        let time =   d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds(); \n        console.log(\"end \" + time)\n        this.setState({\n            end : d.getTime(),\n            endTime : time,\n            total : true\n        })\n    }\n\n\n    render(){\n\n        const todo = this.state.notes.map((element,index)=>{            \n            return (\n                            <tr key = {index}>\n                            <td>{element.todo}</td>\n                            <td>{element.estTime}</td> \n                            {this.state.start !== 0 ? <td><button className=\"btn btn-primary btn-sm\" type = \"button\" variant=\"contained\" color=\"primary\" onClick={this.start}>Start</button></td> : <td>{this.state.startTime}</td>}\n                            {this.state.end !== 0 ? <td><button className=\"btn btn-primary btn-sm\" type = \"button\" variant=\"contained\" color=\"primary\" onClick={this.end}>End</button></td> : <td>{this.state.endTime}</td>}\n                            {this.state.total ? <td>{(Number(this.state.end) - Number(this.state.start))/3600}</td> : <td>--:--:--</td>}\n                            </tr>\n                )\n})\n\n    return (\n        <div className=\"container\">\n            <div className=\"scores-block1 clearfix\">\n                <div className=\"bg-white shadow-sm Assessment_Results\">\n                <div style={{textAlign : \"center\"}}>\n                <form onSubmit = {this.submitNote}>\n                <div className=\"form-group row\" >\n                    <label className= \"col-sm-3 col-form-label\">Todo :  </label>\n                    <div className=\"col-sm-6\">\n                        <input className=\"form-control\" type=\"text\" name=\"todo\" placeholder=\"Add Todo\" onChange={(e)=>{this.handleInput(e)}}/>\n                    </div>\n                </div>\n                <div className=\"form-group row\">\n                    <label className = \"col-sm-3 col-form-label\">Estimated Time : </label>\n                    <div className=\"col-sm-6\">\n                        <input className=\"form-control\" type=\"text\" name=\"time\" placeholder=\"Estimated time\" onChange={(e)=>{this.handleInput(e)}}/>\n                    </div>\n                </div>\n                    <button className=\"btn btn-primary btn-lg\" type = \"button\" variant=\"contained\" color=\"primary\">\n                    Submit\n                    </button>\n                </form>\n                </div>    \n                    <table className=\"table\" style= {{marginTop : \"2rem\"}}>\n                        <thead >\n                            <tr >\n                                <th> <span className=\"icon-question-circle1\" />Name</th>\n                                <th> <span className=\"icon-clock\" />Estimated Time</th>\n                                <th> <span className=\"icon-clock\" />Start Time</th>\n                                <th> <span className=\"icon-clock\" />End Time</th>\n                                <th> <span className=\"icon-clock\" />Total Time</th>\n                            </tr>\n                        </thead>\n                        <tbody >\n                            {todo}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    );\n    }\n}\n\nexport default ToDoList;","import React, { Component } from 'react';\nimport ToDoList from './todolist'\n\nclass App extends Component {\n  render() {\n    return (\n      <ToDoList/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}